{"id":"../../../node_modules/linear-layout-vector/index.js","dependencies":[{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\packages\\web\\package.json","includedInParent":true,"mtime":1561052975976},{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\linear-layout-vector\\package.json","includedInParent":true,"mtime":1560457213784}],"generated":{"js":"module.exports = LinearLayoutVector;\n\nLinearLayoutVector.prototype.getLength = getLength;\nLinearLayoutVector.prototype.setLength = setLength;\nLinearLayoutVector.prototype.getDefaultSize = getDefaultSize;\nLinearLayoutVector.prototype.setDefaultSize = setDefaultSize;\nLinearLayoutVector.prototype.getAxisOffset = getAxisOffset;\nLinearLayoutVector.prototype.setAxisOffset = setAxisOffset;\nLinearLayoutVector.prototype.getGap = getGap;\nLinearLayoutVector.prototype.setGap = setGap;\nLinearLayoutVector.prototype.getItemSize = getItemSize;\nLinearLayoutVector.prototype.setItemSize = setItemSize;\nLinearLayoutVector.prototype.insert = insert;\nLinearLayoutVector.prototype.remove = remove;\nLinearLayoutVector.prototype.start = start;\nLinearLayoutVector.prototype.end = end;\nLinearLayoutVector.prototype.indexOf = indexOf;\nLinearLayoutVector.prototype.clear = clear;\nLinearLayoutVector.prototype.toString = toString;\n\n/**\n * A sparse array of sizes that represent items in a dimension.\n *\n * Provides efficient support for finding the cumulative distance to\n * the start/end of an item along the axis, and similarly for finding the\n * index of the item at a particular distance.\n *\n * Default size is used for items whose size hasn't been specified.\n */\nfunction LinearLayoutVector(block_size) {\n\n    if(block_size === undefined) {\n        block_size = 128;\n    }\n\n    // Assumption: vector elements (sizes) will typically be set in\n    // small ranges that reflect localized scrolling.  Allocate vector\n    // elements in blocks of block_size, which must be a power of 2.\n    // block_shift is the power of 2 and block_mask masks off as many\n    // low order bits.  The block_table contains all of the allocated\n    // blocks and has length/block_size elements which are allocated lazily.\n    var pow = (Math.log(block_size) / Math.log(2)) | 0,\n        size = Math.pow(2, pow),\n        mask = size - 1;\n\n    this.block_size  = size;\n    this.block_shift = pow;\n    this.block_mask  = mask;\n    this.block_table = [];\n\n    this._defaultSize = 0;\n    this._axisOffset = 0;\n    this._gap = 0;\n\n    // Sorted Vector of intervals for the pending removes, in descending order,\n    // for example [7, 5, 3, 1] for the removes at 7, 6, 5, 3, 2, 1\n    this.removes = null;\n    // Sorted Vector of intervals for the pending inserts, in ascending order,\n    // for example [1, 3, 5, 7] for the inserts at 1, 2, 3, 5, 6, 7\n    this.inserts = null;\n\n    this._length = 0;\n    // What the length will be after any pending changes are flushed.\n    this._pendingLength = -1;\n}\n\n/**\n * The number of item size valued elements.\n *\n * @default 0\n */\nfunction getLength() {\n    return this._pendingLength === -1 ? this._length : this._pendingLength;\n}\n\n/**\n * @private\n * Grows or truncates the vector to be the specified newLength.\n * When truncating, releases empty blocks and sets to NaN any values\n * in the last block beyond the newLength.\n */\nfunction setLength(newLength) {\n    flushPendingChanges.call(this);\n\n    if(newLength < this._length) {\n        // Clear any remaining non-NaN values in the last block\n        var blockIndex = newLength >> this.block_shift;\n        var endIndex = Math.min(blockIndex * this.block_size + this.block_size, this._length) - 1;\n        clearInterval.call(this, newLength, endIndex);\n    }\n\n    this._length = newLength;\n\n    // update the table\n    var partialBlock = ((this._length & this.block_mask) === 0) ? 0 : 1;\n    this.block_table.length = (this._length >> this.block_shift) + partialBlock;\n}\n\n//----------------------------------\n//  defaultSize\n//----------------------------------\n\n/**\n * The size of items whose size was not specified with setItemSize.\n *\n * @default 0\n */\nfunction getDefaultSize() {\n    return this._defaultSize;\n}\n\n/**\n * @private\n */\nfunction setDefaultSize(value) {\n    this._defaultSize = value;\n}\n\n//----------------------------------\n//  axisOffset\n//----------------------------------\n\n/**\n * The offset of the first item from the origin in the majorAxis\n * direction. This is useful when implementing padding,\n * in addition to gaps, for virtual layouts.\n *\n * @see #gap\n */\nfunction getAxisOffset() {\n    return this._axisOffset;\n}\n\n/**\n * @private\n */\nfunction setAxisOffset(value) {\n    this._axisOffset = value;\n}\n\n//----------------------------------\n//  gap\n//----------------------------------\n\n/**\n * The distance between items.\n *\n * @default 0\n */\nfunction getGap() {\n    return this._gap;\n}\n\n/**\n * @private\n */\nfunction setGap(value) {\n    this._gap = value;\n}\n\n//--------------------------------------------------------------------------\n//\n//  Methods\n//\n//--------------------------------------------------------------------------\n\n/**\n * Return the size of the item at index.  If no size was ever\n * specified then then the defaultSize is returned.\n *\n * @param index The item's index.\n * @see defaultSize\n */\nfunction getItemSize(index) {\n    flushPendingChanges.call(this);\n\n    var block = this.block_table[index >> this.block_shift];\n    if(block) {\n        var value = block.sizes[index & this.block_mask];\n        return (value !== value) ? this._defaultSize : value;\n    } else {\n        return this._defaultSize;\n    }\n}\n\n/**\n * Set the size of the item at index. If an index is\n * set to <code>NaN</code> then subsequent calls to get\n * will return the defaultSize.\n *\n * @param index The item's index.\n * @param value The item's size.\n * @see defaultSize\n */\nfunction setItemSize(index, value) {\n    flushPendingChanges.call(this);\n\n    if(index >= this.getLength()) {\n        throw new Error(\"Invalid index and all that.\");\n    }\n\n    var blockIndex = index >> this.block_shift;\n    var block = this.block_table[blockIndex];\n    if(!block) {\n        block = this.block_table[blockIndex] = new Block(this.block_size);\n    }\n\n    var sizesIndex = index & this.block_mask;\n    var sizes = block.sizes;\n    var oldValue = sizes[sizesIndex];\n    if(oldValue === value) {\n        return;\n    }\n\n    if(oldValue !== oldValue) {\n        block.defaultCount -= 1;\n        block.sizesSum += value;\n    } else if(value !== value) {\n        block.defaultCount += 1;\n        block.sizesSum -= oldValue;\n    } else {\n        block.sizesSum += value - oldValue;\n    }\n\n    sizes[sizesIndex] = value;\n}\n\n/**\n * Make room for a new item at index by shifting all of the sizes\n * one position to the right, beginning with startIndex.\n *\n * The value at index will be NaN.\n *\n * This is similar to array.splice(index, 0, NaN).\n *\n * @param index The position of the new NaN size item.\n */\nfunction insert(index) {\n    // We don't support interleaved pending inserts and removes\n    if(this.removes) {\n        flushPendingChanges.call(this);\n    }\n\n    if(this.inserts) {\n        // Update the last interval or add a new one?\n        var lastIndex = this.inserts.length - 1;\n        var intervalEnd = this.inserts[lastIndex];\n\n        if(index === intervalEnd + 1) {\n            // Extend the end of the interval\n            this.inserts[lastIndex] = index;\n        } else if(index > intervalEnd) {\n            // New interval\n            this.inserts.push(index);\n            this.inserts.push(index);\n        } else {\n            // We can't support pending inserts that are not ascending\n            flushPendingChanges.call(this);\n        }\n    }\n\n    this._pendingLength = Math.max(this._length, index + 1);\n\n    if(!this.inserts) {\n        this.inserts = [];\n        this.inserts.push(index);\n        this.inserts.push(index);\n    }\n}\n\n/**\n * Remove index by shifting all of the sizes one position to the left,\n * begining with index+1.\n *\n * This is similar to array.splice(index, 1).\n *\n * @param index The position to be removed.\n */\nfunction remove(index) {\n    // We don't support interleaved pending inserts and removes\n    if(this.inserts) {\n        flushPendingChanges.call(this);\n    }\n\n    // length getter takes into account pending inserts/removes but doesn't flush\n    if(index >= this.getLength()) {\n        throw new Error(\"Invalid index and all that.\");\n    }\n\n    if(this.removes) {\n        // Update the last interval or add a new one?\n        var lastIndex = this.removes.length - 1;\n        var intervalStart = this.removes[lastIndex];\n\n        if(index === intervalStart - 1) {\n            // Extend the start of the interval\n            this.removes[lastIndex] = index;\n        } else if(index < intervalStart) {\n            // New interval\n            this.removes.push(index);\n            this.removes.push(index);\n        } else {\n            // We can't support pending removes that are not descending\n            flushPendingChanges.call(this);\n        }\n    }\n\n    this._pendingLength = (this._pendingLength === -1) ? length - 1 : this._pendingLength - 1;\n\n    if(!this.removes) {\n        this.removes = [];\n        this.removes.push(index);\n        this.removes.push(index);\n    }\n}\n\n/**\n * @private\n * Returns true when all sizes in the specified interval for the block are NaN\n */\nfunction isIntervalClear(block, index, count) {\n    var sizes = block.sizes, size;\n    for(count += index; index < count; ++index) {\n        if((size = sizes[index]) === size) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * @private\n * Copies elements between blocks. Indices relative to the blocks.\n * If srcBlock is null, then it fills the destination with NaNs.\n * The case of srcBlock === dstBlock is also supported.\n * The caller must ensure that count is within range.\n */\nfunction inBlockCopy(dstBlock, dstIndexStart, srcBlock, srcIndexStart, count) {\n    var ascending = dstIndexStart < srcIndexStart;\n\n    var srcIndex = ascending ? srcIndexStart : srcIndexStart + count - 1;\n    var dstIndex = ascending ? dstIndexStart : dstIndexStart + count - 1;\n    var increment = ascending ? +1 : -1;\n\n    var dstSizes = dstBlock.sizes;\n    var srcSizes = srcBlock ? srcBlock.sizes : null;\n    var dstValue = NaN;\n    var srcValue = NaN;\n    var sizesSumDelta = 0; // How much the destination sizesSum will change\n    var defaultCountDelta = 0; // How much the destination defaultCount will change\n\n    while(count > 0) {\n        if(srcSizes) {\n            srcValue = srcSizes[srcIndex];\n        }\n\n        dstValue = dstSizes[dstIndex];\n\n        // Are the values different?\n        if(srcValue !== dstValue) { // Triple '=' to handle NaN comparison\n\n            // Are we removing a default size or a chached size?\n            if(dstValue !== dstValue) {\n                defaultCountDelta--;\n            } else {\n                sizesSumDelta -= dstValue;\n            }\n\n            // Are we adding a default size or a cached size?\n            if(srcValue !== srcValue) {\n                defaultCountDelta++;\n            } else {\n                sizesSumDelta += srcValue;\n            }\n\n            dstSizes[dstIndex] = srcValue;\n        }\n\n        srcIndex += increment;\n        dstIndex += increment;\n        count--;\n    }\n\n    dstBlock.sizesSum += sizesSumDelta;\n    dstBlock.defaultCount += defaultCountDelta;\n}\n\n/**\n * @private\n * Copies 'count' elements from dstIndex to srcIndex.\n * Safe for overlapping source and destination intervals.\n * If any blocks are left full of NaNs, they will be deallcated.\n */\nfunction copyInterval(dstIndex, srcIndex, count) {\n    var ascending = dstIndex < srcIndex;\n    if(!ascending) {\n        dstIndex += count - 1;\n        srcIndex += count - 1;\n    }\n\n    while(count > 0) {\n        // Figure out destination block\n        var dstBlockIndex = dstIndex >> this.block_shift;\n        var dstSizesIndex = dstIndex & this.block_mask;\n        var dstBlock = this.block_table[dstBlockIndex];\n\n        // Figure out source block\n        var srcBlockIndex = srcIndex >> this.block_shift;\n        var srcSizesIndex = srcIndex & this.block_mask;\n        var srcBlock = this.block_table[srcBlockIndex];\n\n        // Figure out number of elements to copy\n        var copyCount = ascending ?\n            Math.min(this.block_size - dstSizesIndex, this.block_size - srcSizesIndex) :\n            1 + Math.min(dstSizesIndex, srcSizesIndex);\n\n        copyCount = Math.min(copyCount, count);\n\n        // Figure out the start index for each block\n        var dstStartIndex = ascending ? dstSizesIndex : dstSizesIndex - copyCount + 1;\n        var srcStartIndex = ascending ? srcSizesIndex : srcSizesIndex - copyCount + 1;\n\n        // Check whether a destination block needs to be allocated.\n        // Allocate only if there are non-default values to be copied from the source.\n        if(srcBlock && !dstBlock && isIntervalClear(srcBlock, srcStartIndex, copyCount)) {\n            dstBlock = new Block(this.block_size);\n            this.block_table[dstBlockIndex] = dstBlock;\n        }\n\n        // Copy to non-null dstBlock, srcBlock can be null\n        if(dstBlock) {\n            inBlockCopy(dstBlock, dstStartIndex, srcBlock, srcStartIndex, copyCount);\n\n            // If this is the last time we're visiting this block, and it contains\n            // only NaNs, then remove it\n            if(dstBlock.defaultCount === this.block_size) {\n                var blockEndReached = ascending ?\n                    (dstStartIndex + copyCount === this.block_size) :\n                    (dstStartIndex === 0);\n                if(blockEndReached || count === copyCount)\n                    this.block_table[dstBlockIndex] = null;\n            }\n        }\n\n        dstIndex += ascending ? copyCount : -copyCount;\n        srcIndex += ascending ? copyCount : -copyCount;\n        count -= copyCount;\n    }\n}\n\n/**\n * @private\n * Sets all elements within the specified interval to NaN (both ends inclusive).\n * Releases empty blocks.\n */\nfunction clearInterval(start, end) {\n    while(start <= end) {\n        // Figure our destination block\n        var blockIndex = start >> this.block_shift;\n        var sizesIndex = start & this.block_mask;\n        var block = this.block_table[blockIndex];\n\n        // Figure out number of elements to clear in this iteration\n        // Make sure we don't clear more items than requested\n        var clearCount = this.block_size - sizesIndex;\n        clearCount = Math.min(clearCount, end - start + 1);\n\n        if(block) {\n            if(clearCount === this.block_size) {\n                this.block_table[blockIndex] = null;\n            } else {\n                // Copying from null source block is equivalent of clearing the destination block\n                inBlockCopy(block, sizesIndex, null /*srcBlock*/, 0, clearCount);\n\n                // If the blockDst contains only default sizes, then remove the block\n                if(block.defaultCount === this.block_size) {\n                    this.block_table[blockIndex] = null;\n                }\n            }\n        }\n\n        start += clearCount;\n    }\n}\n\n/**\n * @private\n * Removes the elements designated by the intervals and truncates\n * the LinearLayoutVector to the new length.\n * 'intervals' is a Vector of descending intervals [7, 5, 3, 1]\n */\nfunction removeIntervals(intervals) {\n    var intervalsCount = intervals.length;\n    if(intervalsCount === 0) {\n        return;\n    }\n\n    // Adding final nextIntervalStart value (see below).\n    intervals.reverse(); // turn into ascending, for example [7, 5, 3, 1] --> [1, 3, 5, 7]\n    intervals.push(this.getLength());\n\n    // Move the elements\n    var dstStart = intervals[0];\n    var srcStart;\n    var count;\n    var i = 0;\n    do {\n        var intervalEnd = intervals[i + 1];\n        var nextIntervalStart = intervals[i + 2]\n        i += 2;\n\n        // Start copy from after the end of current interval\n        srcStart = intervalEnd + 1;\n\n        // copy all elements up to the start of the next interval.\n        count = nextIntervalStart - srcStart;\n\n        copyInterval.call(this, dstStart, srcStart, count);\n        dstStart += count;\n    } while(i < intervalsCount)\n\n    // Truncate the excess elements.\n    this.setLength(dstStart);\n}\n\n/**\n * @private\n * Increases the length and inserts NaN values for the elements designated by the intervals.\n * 'intervals' is a Vector of ascending intervals [1, 3, 5, 7]\n */\nfunction insertIntervals(intervals, newLength) {\n    var intervalsCount = intervals.length;\n    if(intervalsCount === 0) {\n        return;\n    }\n\n    // Allocate enough space for the insertions, all the elements\n    // allocated are NaN by default.\n    var oldLength = this.getLength();\n    this.setLength(newLength);\n\n    var srcEnd = oldLength - 1;\n    var dstEnd = newLength - 1;\n    var i = intervalsCount - 2;\n    while(i >= 0) {\n        // Find current interval\n        var intervalStart = intervals[i];\n        var intervalEnd = intervals[i + 1];\n        i -= 2;\n\n        // Start after the current interval\n        var dstStart = intervalEnd + 1;\n        var copyCount = dstEnd - dstStart + 1;\n        var srcStart = srcEnd - copyCount + 1;\n\n        copyInterval.call(this, dstStart, srcStart, copyCount);\n        dstStart -= copyCount;\n        dstEnd = intervalStart - 1;\n\n        // Fill in with default NaN values after the copy\n        clearInterval.call(this, intervalStart, intervalEnd);\n    }\n}\n\n/**\n * @private\n * Processes any pending removes or pending inserts.\n */\nfunction flushPendingChanges() {\n    var intervals;\n    if(this.removes) {\n        intervals = this.removes;\n        this.removes = null;\n        this._pendingLength = -1;\n        removeIntervals.call(this, intervals);\n    } else if(this.inserts) {\n        intervals = this.inserts;\n        var newLength = this._pendingLength;\n        this.inserts = null;\n        this._pendingLength = -1;\n        insertIntervals.call(this, intervals, newLength);\n    }\n}\n\n/**\n * The cumulative distance to the start of the item at index, including\n * the gaps between items and the axisOffset.\n *\n * The value of start(0) is axisOffset.\n *\n * Equivalent to:\n * <pre>\n * var distance = this.getAxisOffset();\n * for (var i = 0; i &lt; index; i++)\n *     distance += get(i);\n * return distance + (gap * index);\n * </pre>\n *\n * The actual implementation is relatively efficient.\n *\n * @param index The item's index.\n * @see #end\n */\nfunction start(index) {\n\n    flushPendingChanges.call(this);\n\n    if((this._length === 0) || (index === 0)) {\n        return this.getAxisOffset();\n    }\n\n    if(index >= this._length) {\n        throw new Error(\"Invalid index and all that.\");\n    }\n\n    var distance = this.getAxisOffset();\n    var blockIndex = index >> this.block_shift;\n    for(var i = 0; i < blockIndex; i++)\n    {\n        var block = this.block_table[i];\n        distance += block ?\n            block.sizesSum + (block.defaultCount * this._defaultSize) :\n            this.block_size * this._defaultSize;\n    }\n    var lastBlock = this.block_table[blockIndex];\n    var lastBlockOffset = index & ~this.block_mask;\n    var lastBlockLength = index - lastBlockOffset;\n    if(lastBlock) {\n        var sizes = lastBlock.sizes;\n        for(i = 0; i < lastBlockLength; i++) {\n            var size = sizes[i];\n            distance += (size !== size) ? this._defaultSize : size;\n        }\n    } else {\n        distance += this._defaultSize * lastBlockLength;\n    }\n    distance += index * this.getGap();\n    return distance;\n}\n\n/**\n * The cumulative distance to the end of the item at index, including\n * the gaps between items.\n *\n * If <code>index &lt;(length-1)</code> then the value of this\n * function is defined as:\n * <code>start(index) + get(index)</code>.\n *\n * @param index The item's index.\n * @see #start\n */\nfunction end(index) {\n    flushPendingChanges.call(this);\n    return this.start(index) + this.getItemSize(index);\n}\n\n/**\n * Returns the index of the item that overlaps the specified distance.\n *\n * The item at index <code>i</code> overlaps a distance value\n * if <code>start(i) &lt;= distance &lt; end(i)</code>.\n *\n * If no such item exists, -1 is returned.\n */\nfunction indexOf(distance) {\n    flushPendingChanges.call(this);\n    var index = indexOfInternal.call(this, distance);\n    return (index >= this._length) ? -1 : index;\n}\n\nfunction indexOfInternal(distance) {\n\n    if((this._length === 0) || (distance < 0)) {\n        return -1;\n    }\n\n    // The area of the first item includes the axisOffset\n    var curDistance = this.getAxisOffset();\n\n    if(distance < curDistance) {\n        return 0;\n    }\n\n    var index = -1,\n        block = null,\n        blockSize = this.block_size,\n        defaultSize = this._defaultSize,\n        gap = this.getGap(),\n        blockGap = gap * blockSize;\n\n    // Find the block that contains distance and the index of its\n    // first element\n    var blockIndex = -1,\n        blockTable = this.block_table,\n        blockTableLength = blockTable.length;\n\n    for(; ++blockIndex < blockTableLength;) {\n        block = blockTable[blockIndex];\n        var blockDistance = blockGap + (\n            block ?\n                block.sizesSum + (block.defaultCount * defaultSize) :\n                blockSize * defaultSize\n        );\n\n        if((distance === curDistance) || ((distance >= curDistance) && (distance < (curDistance + blockDistance)))) {\n            index = blockIndex << this.block_shift;\n            break;\n        }\n        curDistance += blockDistance;\n    }\n\n    if((index === -1) || (distance === curDistance)) {\n        return index;\n    }\n\n    // At this point index corresponds to the first item in this block\n    if(block) {\n        // Find the item that contains distance and return its index\n        var sizes = block.sizes,\n            n = this.block_size - 1;\n        for(var i = 0; i < n; i++) {\n            var size = sizes[i];\n            curDistance += gap + (size !== size ? this._defaultSize : size);\n            if(curDistance > distance) {\n                return index + i;\n            }\n        }\n        // TBD special-case for the very last index\n        return index + this.block_size - 1;\n    } else {\n        return index + Math.floor(Number(distance - curDistance) / Number(this._defaultSize + gap));\n    }\n}\n\n/**\n * Clear all cached state, reset length to zero.\n */\nfunction clear() {\n    // Discard any pending changes, before setting the length\n    // otherwise the length setter will commit the changes.\n    this.removes = null;\n    this.inserts = null;\n    this._pendingLength = -1;\n\n    this.setLength(0); // clears the this.block_table as well\n}\n\nfunction toString() {\n    return \"LinearLayoutVector { \" +\n        \"length: \" + this._length + \", \" +\n        \"size: \" + this.end(this.getLength() -1) + \", \" +\n        \"[blocks: \" + this.block_table.length + \"]\" + \", \" +\n        \"gap: \" + this._gap + \", \" +\n        \"defaultSize: \" + this._defaultSize + \", \" +\n        \"pendingRemoves: \" + (this.removes ? this.removes.length : 0) + \", \" +\n        \"pendingInserts: \" + (this.inserts ? this.inserts.length : 0) +\n        \" }\";\n}\n\n/**\n * @private\n * A LinearLayoutVector block of layout element heights or widths.\n *\n * Total \"distance\" for a Block is: sizesSum + (defaultCount * distanceVector.default).\n */\nfunction Block(block_size) {\n\n    this.sizes = new Array(block_size);\n    this.sizesSum = 0;\n    this.defaultCount = block_size;\n\n    for(var i = -1; ++i < block_size;) {\n        this.sizes[i] = NaN;\n    }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../../../node_modules/linear-layout-vector/index.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}}],"sources":{"../../../node_modules/linear-layout-vector/index.js":"module.exports = LinearLayoutVector;\n\nLinearLayoutVector.prototype.getLength = getLength;\nLinearLayoutVector.prototype.setLength = setLength;\nLinearLayoutVector.prototype.getDefaultSize = getDefaultSize;\nLinearLayoutVector.prototype.setDefaultSize = setDefaultSize;\nLinearLayoutVector.prototype.getAxisOffset = getAxisOffset;\nLinearLayoutVector.prototype.setAxisOffset = setAxisOffset;\nLinearLayoutVector.prototype.getGap = getGap;\nLinearLayoutVector.prototype.setGap = setGap;\nLinearLayoutVector.prototype.getItemSize = getItemSize;\nLinearLayoutVector.prototype.setItemSize = setItemSize;\nLinearLayoutVector.prototype.insert = insert;\nLinearLayoutVector.prototype.remove = remove;\nLinearLayoutVector.prototype.start = start;\nLinearLayoutVector.prototype.end = end;\nLinearLayoutVector.prototype.indexOf = indexOf;\nLinearLayoutVector.prototype.clear = clear;\nLinearLayoutVector.prototype.toString = toString;\n\n/**\n * A sparse array of sizes that represent items in a dimension.\n *\n * Provides efficient support for finding the cumulative distance to\n * the start/end of an item along the axis, and similarly for finding the\n * index of the item at a particular distance.\n *\n * Default size is used for items whose size hasn't been specified.\n */\nfunction LinearLayoutVector(block_size) {\n\n    if(block_size === undefined) {\n        block_size = 128;\n    }\n\n    // Assumption: vector elements (sizes) will typically be set in\n    // small ranges that reflect localized scrolling.  Allocate vector\n    // elements in blocks of block_size, which must be a power of 2.\n    // block_shift is the power of 2 and block_mask masks off as many\n    // low order bits.  The block_table contains all of the allocated\n    // blocks and has length/block_size elements which are allocated lazily.\n    var pow = (Math.log(block_size) / Math.log(2)) | 0,\n        size = Math.pow(2, pow),\n        mask = size - 1;\n\n    this.block_size  = size;\n    this.block_shift = pow;\n    this.block_mask  = mask;\n    this.block_table = [];\n\n    this._defaultSize = 0;\n    this._axisOffset = 0;\n    this._gap = 0;\n\n    // Sorted Vector of intervals for the pending removes, in descending order,\n    // for example [7, 5, 3, 1] for the removes at 7, 6, 5, 3, 2, 1\n    this.removes = null;\n    // Sorted Vector of intervals for the pending inserts, in ascending order,\n    // for example [1, 3, 5, 7] for the inserts at 1, 2, 3, 5, 6, 7\n    this.inserts = null;\n\n    this._length = 0;\n    // What the length will be after any pending changes are flushed.\n    this._pendingLength = -1;\n}\n\n/**\n * The number of item size valued elements.\n *\n * @default 0\n */\nfunction getLength() {\n    return this._pendingLength === -1 ? this._length : this._pendingLength;\n}\n\n/**\n * @private\n * Grows or truncates the vector to be the specified newLength.\n * When truncating, releases empty blocks and sets to NaN any values\n * in the last block beyond the newLength.\n */\nfunction setLength(newLength) {\n    flushPendingChanges.call(this);\n\n    if(newLength < this._length) {\n        // Clear any remaining non-NaN values in the last block\n        var blockIndex = newLength >> this.block_shift;\n        var endIndex = Math.min(blockIndex * this.block_size + this.block_size, this._length) - 1;\n        clearInterval.call(this, newLength, endIndex);\n    }\n\n    this._length = newLength;\n\n    // update the table\n    var partialBlock = ((this._length & this.block_mask) === 0) ? 0 : 1;\n    this.block_table.length = (this._length >> this.block_shift) + partialBlock;\n}\n\n//----------------------------------\n//  defaultSize\n//----------------------------------\n\n/**\n * The size of items whose size was not specified with setItemSize.\n *\n * @default 0\n */\nfunction getDefaultSize() {\n    return this._defaultSize;\n}\n\n/**\n * @private\n */\nfunction setDefaultSize(value) {\n    this._defaultSize = value;\n}\n\n//----------------------------------\n//  axisOffset\n//----------------------------------\n\n/**\n * The offset of the first item from the origin in the majorAxis\n * direction. This is useful when implementing padding,\n * in addition to gaps, for virtual layouts.\n *\n * @see #gap\n */\nfunction getAxisOffset() {\n    return this._axisOffset;\n}\n\n/**\n * @private\n */\nfunction setAxisOffset(value) {\n    this._axisOffset = value;\n}\n\n//----------------------------------\n//  gap\n//----------------------------------\n\n/**\n * The distance between items.\n *\n * @default 0\n */\nfunction getGap() {\n    return this._gap;\n}\n\n/**\n * @private\n */\nfunction setGap(value) {\n    this._gap = value;\n}\n\n//--------------------------------------------------------------------------\n//\n//  Methods\n//\n//--------------------------------------------------------------------------\n\n/**\n * Return the size of the item at index.  If no size was ever\n * specified then then the defaultSize is returned.\n *\n * @param index The item's index.\n * @see defaultSize\n */\nfunction getItemSize(index) {\n    flushPendingChanges.call(this);\n\n    var block = this.block_table[index >> this.block_shift];\n    if(block) {\n        var value = block.sizes[index & this.block_mask];\n        return (value !== value) ? this._defaultSize : value;\n    } else {\n        return this._defaultSize;\n    }\n}\n\n/**\n * Set the size of the item at index. If an index is\n * set to <code>NaN</code> then subsequent calls to get\n * will return the defaultSize.\n *\n * @param index The item's index.\n * @param value The item's size.\n * @see defaultSize\n */\nfunction setItemSize(index, value) {\n    flushPendingChanges.call(this);\n\n    if(index >= this.getLength()) {\n        throw new Error(\"Invalid index and all that.\");\n    }\n\n    var blockIndex = index >> this.block_shift;\n    var block = this.block_table[blockIndex];\n    if(!block) {\n        block = this.block_table[blockIndex] = new Block(this.block_size);\n    }\n\n    var sizesIndex = index & this.block_mask;\n    var sizes = block.sizes;\n    var oldValue = sizes[sizesIndex];\n    if(oldValue === value) {\n        return;\n    }\n\n    if(oldValue !== oldValue) {\n        block.defaultCount -= 1;\n        block.sizesSum += value;\n    } else if(value !== value) {\n        block.defaultCount += 1;\n        block.sizesSum -= oldValue;\n    } else {\n        block.sizesSum += value - oldValue;\n    }\n\n    sizes[sizesIndex] = value;\n}\n\n/**\n * Make room for a new item at index by shifting all of the sizes\n * one position to the right, beginning with startIndex.\n *\n * The value at index will be NaN.\n *\n * This is similar to array.splice(index, 0, NaN).\n *\n * @param index The position of the new NaN size item.\n */\nfunction insert(index) {\n    // We don't support interleaved pending inserts and removes\n    if(this.removes) {\n        flushPendingChanges.call(this);\n    }\n\n    if(this.inserts) {\n        // Update the last interval or add a new one?\n        var lastIndex = this.inserts.length - 1;\n        var intervalEnd = this.inserts[lastIndex];\n\n        if(index === intervalEnd + 1) {\n            // Extend the end of the interval\n            this.inserts[lastIndex] = index;\n        } else if(index > intervalEnd) {\n            // New interval\n            this.inserts.push(index);\n            this.inserts.push(index);\n        } else {\n            // We can't support pending inserts that are not ascending\n            flushPendingChanges.call(this);\n        }\n    }\n\n    this._pendingLength = Math.max(this._length, index + 1);\n\n    if(!this.inserts) {\n        this.inserts = [];\n        this.inserts.push(index);\n        this.inserts.push(index);\n    }\n}\n\n/**\n * Remove index by shifting all of the sizes one position to the left,\n * begining with index+1.\n *\n * This is similar to array.splice(index, 1).\n *\n * @param index The position to be removed.\n */\nfunction remove(index) {\n    // We don't support interleaved pending inserts and removes\n    if(this.inserts) {\n        flushPendingChanges.call(this);\n    }\n\n    // length getter takes into account pending inserts/removes but doesn't flush\n    if(index >= this.getLength()) {\n        throw new Error(\"Invalid index and all that.\");\n    }\n\n    if(this.removes) {\n        // Update the last interval or add a new one?\n        var lastIndex = this.removes.length - 1;\n        var intervalStart = this.removes[lastIndex];\n\n        if(index === intervalStart - 1) {\n            // Extend the start of the interval\n            this.removes[lastIndex] = index;\n        } else if(index < intervalStart) {\n            // New interval\n            this.removes.push(index);\n            this.removes.push(index);\n        } else {\n            // We can't support pending removes that are not descending\n            flushPendingChanges.call(this);\n        }\n    }\n\n    this._pendingLength = (this._pendingLength === -1) ? length - 1 : this._pendingLength - 1;\n\n    if(!this.removes) {\n        this.removes = [];\n        this.removes.push(index);\n        this.removes.push(index);\n    }\n}\n\n/**\n * @private\n * Returns true when all sizes in the specified interval for the block are NaN\n */\nfunction isIntervalClear(block, index, count) {\n    var sizes = block.sizes, size;\n    for(count += index; index < count; ++index) {\n        if((size = sizes[index]) === size) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * @private\n * Copies elements between blocks. Indices relative to the blocks.\n * If srcBlock is null, then it fills the destination with NaNs.\n * The case of srcBlock === dstBlock is also supported.\n * The caller must ensure that count is within range.\n */\nfunction inBlockCopy(dstBlock, dstIndexStart, srcBlock, srcIndexStart, count) {\n    var ascending = dstIndexStart < srcIndexStart;\n\n    var srcIndex = ascending ? srcIndexStart : srcIndexStart + count - 1;\n    var dstIndex = ascending ? dstIndexStart : dstIndexStart + count - 1;\n    var increment = ascending ? +1 : -1;\n\n    var dstSizes = dstBlock.sizes;\n    var srcSizes = srcBlock ? srcBlock.sizes : null;\n    var dstValue = NaN;\n    var srcValue = NaN;\n    var sizesSumDelta = 0; // How much the destination sizesSum will change\n    var defaultCountDelta = 0; // How much the destination defaultCount will change\n\n    while(count > 0) {\n        if(srcSizes) {\n            srcValue = srcSizes[srcIndex];\n        }\n\n        dstValue = dstSizes[dstIndex];\n\n        // Are the values different?\n        if(srcValue !== dstValue) { // Triple '=' to handle NaN comparison\n\n            // Are we removing a default size or a chached size?\n            if(dstValue !== dstValue) {\n                defaultCountDelta--;\n            } else {\n                sizesSumDelta -= dstValue;\n            }\n\n            // Are we adding a default size or a cached size?\n            if(srcValue !== srcValue) {\n                defaultCountDelta++;\n            } else {\n                sizesSumDelta += srcValue;\n            }\n\n            dstSizes[dstIndex] = srcValue;\n        }\n\n        srcIndex += increment;\n        dstIndex += increment;\n        count--;\n    }\n\n    dstBlock.sizesSum += sizesSumDelta;\n    dstBlock.defaultCount += defaultCountDelta;\n}\n\n/**\n * @private\n * Copies 'count' elements from dstIndex to srcIndex.\n * Safe for overlapping source and destination intervals.\n * If any blocks are left full of NaNs, they will be deallcated.\n */\nfunction copyInterval(dstIndex, srcIndex, count) {\n    var ascending = dstIndex < srcIndex;\n    if(!ascending) {\n        dstIndex += count - 1;\n        srcIndex += count - 1;\n    }\n\n    while(count > 0) {\n        // Figure out destination block\n        var dstBlockIndex = dstIndex >> this.block_shift;\n        var dstSizesIndex = dstIndex & this.block_mask;\n        var dstBlock = this.block_table[dstBlockIndex];\n\n        // Figure out source block\n        var srcBlockIndex = srcIndex >> this.block_shift;\n        var srcSizesIndex = srcIndex & this.block_mask;\n        var srcBlock = this.block_table[srcBlockIndex];\n\n        // Figure out number of elements to copy\n        var copyCount = ascending ?\n            Math.min(this.block_size - dstSizesIndex, this.block_size - srcSizesIndex) :\n            1 + Math.min(dstSizesIndex, srcSizesIndex);\n\n        copyCount = Math.min(copyCount, count);\n\n        // Figure out the start index for each block\n        var dstStartIndex = ascending ? dstSizesIndex : dstSizesIndex - copyCount + 1;\n        var srcStartIndex = ascending ? srcSizesIndex : srcSizesIndex - copyCount + 1;\n\n        // Check whether a destination block needs to be allocated.\n        // Allocate only if there are non-default values to be copied from the source.\n        if(srcBlock && !dstBlock && isIntervalClear(srcBlock, srcStartIndex, copyCount)) {\n            dstBlock = new Block(this.block_size);\n            this.block_table[dstBlockIndex] = dstBlock;\n        }\n\n        // Copy to non-null dstBlock, srcBlock can be null\n        if(dstBlock) {\n            inBlockCopy(dstBlock, dstStartIndex, srcBlock, srcStartIndex, copyCount);\n\n            // If this is the last time we're visiting this block, and it contains\n            // only NaNs, then remove it\n            if(dstBlock.defaultCount === this.block_size) {\n                var blockEndReached = ascending ?\n                    (dstStartIndex + copyCount === this.block_size) :\n                    (dstStartIndex === 0);\n                if(blockEndReached || count === copyCount)\n                    this.block_table[dstBlockIndex] = null;\n            }\n        }\n\n        dstIndex += ascending ? copyCount : -copyCount;\n        srcIndex += ascending ? copyCount : -copyCount;\n        count -= copyCount;\n    }\n}\n\n/**\n * @private\n * Sets all elements within the specified interval to NaN (both ends inclusive).\n * Releases empty blocks.\n */\nfunction clearInterval(start, end) {\n    while(start <= end) {\n        // Figure our destination block\n        var blockIndex = start >> this.block_shift;\n        var sizesIndex = start & this.block_mask;\n        var block = this.block_table[blockIndex];\n\n        // Figure out number of elements to clear in this iteration\n        // Make sure we don't clear more items than requested\n        var clearCount = this.block_size - sizesIndex;\n        clearCount = Math.min(clearCount, end - start + 1);\n\n        if(block) {\n            if(clearCount === this.block_size) {\n                this.block_table[blockIndex] = null;\n            } else {\n                // Copying from null source block is equivalent of clearing the destination block\n                inBlockCopy(block, sizesIndex, null /*srcBlock*/, 0, clearCount);\n\n                // If the blockDst contains only default sizes, then remove the block\n                if(block.defaultCount === this.block_size) {\n                    this.block_table[blockIndex] = null;\n                }\n            }\n        }\n\n        start += clearCount;\n    }\n}\n\n/**\n * @private\n * Removes the elements designated by the intervals and truncates\n * the LinearLayoutVector to the new length.\n * 'intervals' is a Vector of descending intervals [7, 5, 3, 1]\n */\nfunction removeIntervals(intervals) {\n    var intervalsCount = intervals.length;\n    if(intervalsCount === 0) {\n        return;\n    }\n\n    // Adding final nextIntervalStart value (see below).\n    intervals.reverse(); // turn into ascending, for example [7, 5, 3, 1] --> [1, 3, 5, 7]\n    intervals.push(this.getLength());\n\n    // Move the elements\n    var dstStart = intervals[0];\n    var srcStart;\n    var count;\n    var i = 0;\n    do {\n        var intervalEnd = intervals[i + 1];\n        var nextIntervalStart = intervals[i + 2]\n        i += 2;\n\n        // Start copy from after the end of current interval\n        srcStart = intervalEnd + 1;\n\n        // copy all elements up to the start of the next interval.\n        count = nextIntervalStart - srcStart;\n\n        copyInterval.call(this, dstStart, srcStart, count);\n        dstStart += count;\n    } while(i < intervalsCount)\n\n    // Truncate the excess elements.\n    this.setLength(dstStart);\n}\n\n/**\n * @private\n * Increases the length and inserts NaN values for the elements designated by the intervals.\n * 'intervals' is a Vector of ascending intervals [1, 3, 5, 7]\n */\nfunction insertIntervals(intervals, newLength) {\n    var intervalsCount = intervals.length;\n    if(intervalsCount === 0) {\n        return;\n    }\n\n    // Allocate enough space for the insertions, all the elements\n    // allocated are NaN by default.\n    var oldLength = this.getLength();\n    this.setLength(newLength);\n\n    var srcEnd = oldLength - 1;\n    var dstEnd = newLength - 1;\n    var i = intervalsCount - 2;\n    while(i >= 0) {\n        // Find current interval\n        var intervalStart = intervals[i];\n        var intervalEnd = intervals[i + 1];\n        i -= 2;\n\n        // Start after the current interval\n        var dstStart = intervalEnd + 1;\n        var copyCount = dstEnd - dstStart + 1;\n        var srcStart = srcEnd - copyCount + 1;\n\n        copyInterval.call(this, dstStart, srcStart, copyCount);\n        dstStart -= copyCount;\n        dstEnd = intervalStart - 1;\n\n        // Fill in with default NaN values after the copy\n        clearInterval.call(this, intervalStart, intervalEnd);\n    }\n}\n\n/**\n * @private\n * Processes any pending removes or pending inserts.\n */\nfunction flushPendingChanges() {\n    var intervals;\n    if(this.removes) {\n        intervals = this.removes;\n        this.removes = null;\n        this._pendingLength = -1;\n        removeIntervals.call(this, intervals);\n    } else if(this.inserts) {\n        intervals = this.inserts;\n        var newLength = this._pendingLength;\n        this.inserts = null;\n        this._pendingLength = -1;\n        insertIntervals.call(this, intervals, newLength);\n    }\n}\n\n/**\n * The cumulative distance to the start of the item at index, including\n * the gaps between items and the axisOffset.\n *\n * The value of start(0) is axisOffset.\n *\n * Equivalent to:\n * <pre>\n * var distance = this.getAxisOffset();\n * for (var i = 0; i &lt; index; i++)\n *     distance += get(i);\n * return distance + (gap * index);\n * </pre>\n *\n * The actual implementation is relatively efficient.\n *\n * @param index The item's index.\n * @see #end\n */\nfunction start(index) {\n\n    flushPendingChanges.call(this);\n\n    if((this._length === 0) || (index === 0)) {\n        return this.getAxisOffset();\n    }\n\n    if(index >= this._length) {\n        throw new Error(\"Invalid index and all that.\");\n    }\n\n    var distance = this.getAxisOffset();\n    var blockIndex = index >> this.block_shift;\n    for(var i = 0; i < blockIndex; i++)\n    {\n        var block = this.block_table[i];\n        distance += block ?\n            block.sizesSum + (block.defaultCount * this._defaultSize) :\n            this.block_size * this._defaultSize;\n    }\n    var lastBlock = this.block_table[blockIndex];\n    var lastBlockOffset = index & ~this.block_mask;\n    var lastBlockLength = index - lastBlockOffset;\n    if(lastBlock) {\n        var sizes = lastBlock.sizes;\n        for(i = 0; i < lastBlockLength; i++) {\n            var size = sizes[i];\n            distance += (size !== size) ? this._defaultSize : size;\n        }\n    } else {\n        distance += this._defaultSize * lastBlockLength;\n    }\n    distance += index * this.getGap();\n    return distance;\n}\n\n/**\n * The cumulative distance to the end of the item at index, including\n * the gaps between items.\n *\n * If <code>index &lt;(length-1)</code> then the value of this\n * function is defined as:\n * <code>start(index) + get(index)</code>.\n *\n * @param index The item's index.\n * @see #start\n */\nfunction end(index) {\n    flushPendingChanges.call(this);\n    return this.start(index) + this.getItemSize(index);\n}\n\n/**\n * Returns the index of the item that overlaps the specified distance.\n *\n * The item at index <code>i</code> overlaps a distance value\n * if <code>start(i) &lt;= distance &lt; end(i)</code>.\n *\n * If no such item exists, -1 is returned.\n */\nfunction indexOf(distance) {\n    flushPendingChanges.call(this);\n    var index = indexOfInternal.call(this, distance);\n    return (index >= this._length) ? -1 : index;\n}\n\nfunction indexOfInternal(distance) {\n\n    if((this._length === 0) || (distance < 0)) {\n        return -1;\n    }\n\n    // The area of the first item includes the axisOffset\n    var curDistance = this.getAxisOffset();\n\n    if(distance < curDistance) {\n        return 0;\n    }\n\n    var index = -1,\n        block = null,\n        blockSize = this.block_size,\n        defaultSize = this._defaultSize,\n        gap = this.getGap(),\n        blockGap = gap * blockSize;\n\n    // Find the block that contains distance and the index of its\n    // first element\n    var blockIndex = -1,\n        blockTable = this.block_table,\n        blockTableLength = blockTable.length;\n\n    for(; ++blockIndex < blockTableLength;) {\n        block = blockTable[blockIndex];\n        var blockDistance = blockGap + (\n            block ?\n                block.sizesSum + (block.defaultCount * defaultSize) :\n                blockSize * defaultSize\n        );\n\n        if((distance === curDistance) || ((distance >= curDistance) && (distance < (curDistance + blockDistance)))) {\n            index = blockIndex << this.block_shift;\n            break;\n        }\n        curDistance += blockDistance;\n    }\n\n    if((index === -1) || (distance === curDistance)) {\n        return index;\n    }\n\n    // At this point index corresponds to the first item in this block\n    if(block) {\n        // Find the item that contains distance and return its index\n        var sizes = block.sizes,\n            n = this.block_size - 1;\n        for(var i = 0; i < n; i++) {\n            var size = sizes[i];\n            curDistance += gap + (size !== size ? this._defaultSize : size);\n            if(curDistance > distance) {\n                return index + i;\n            }\n        }\n        // TBD special-case for the very last index\n        return index + this.block_size - 1;\n    } else {\n        return index + Math.floor(Number(distance - curDistance) / Number(this._defaultSize + gap));\n    }\n}\n\n/**\n * Clear all cached state, reset length to zero.\n */\nfunction clear() {\n    // Discard any pending changes, before setting the length\n    // otherwise the length setter will commit the changes.\n    this.removes = null;\n    this.inserts = null;\n    this._pendingLength = -1;\n\n    this.setLength(0); // clears the this.block_table as well\n}\n\nfunction toString() {\n    return \"LinearLayoutVector { \" +\n        \"length: \" + this._length + \", \" +\n        \"size: \" + this.end(this.getLength() -1) + \", \" +\n        \"[blocks: \" + this.block_table.length + \"]\" + \", \" +\n        \"gap: \" + this._gap + \", \" +\n        \"defaultSize: \" + this._defaultSize + \", \" +\n        \"pendingRemoves: \" + (this.removes ? this.removes.length : 0) + \", \" +\n        \"pendingInserts: \" + (this.inserts ? this.inserts.length : 0) +\n        \" }\";\n}\n\n/**\n * @private\n * A LinearLayoutVector block of layout element heights or widths.\n *\n * Total \"distance\" for a Block is: sizesSum + (defaultCount * distanceVector.default).\n */\nfunction Block(block_size) {\n\n    this.sizes = new Array(block_size);\n    this.sizesSum = 0;\n    this.defaultCount = block_size;\n\n    for(var i = -1; ++i < block_size;) {\n        this.sizes[i] = NaN;\n    }\n}\n"},"lineCount":776}},"error":null,"hash":"abe9a24fc595607e518128b5243d7baa","cacheData":{"env":{}}}