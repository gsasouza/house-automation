{"id":"../../../node_modules/lodash/_memoizeCapped.js","dependencies":[{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\packages\\web\\package.json","includedInParent":true,"mtime":1561054270676},{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1559172019662},{"name":"./memoize","loc":{"line":1,"column":22},"parent":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\lodash\\_memoizeCapped.js","resolved":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\lodash\\memoize.js"}],"generated":{"js":"var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/lodash/_memoizeCapped.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"../../../node_modules/lodash/_memoizeCapped.js":"var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n"},"lineCount":27}},"error":null,"hash":"1fe428f60b44f792169b6a6204024135","cacheData":{"env":{}}}