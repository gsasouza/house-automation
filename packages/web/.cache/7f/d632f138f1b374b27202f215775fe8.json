{"id":"../../../node_modules/rxjs-async-map/out/index.js","dependencies":[{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs-async-map\\out\\index.js.map","includedInParent":true,"mtime":1561012227519},{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs-async-map\\src\\index.ts","includedInParent":true,"mtime":1561012227519},{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\packages\\web\\package.json","includedInParent":true,"mtime":1561012880883},{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs-async-map\\package.json","includedInParent":true,"mtime":1561012227519},{"name":"rxjs/Observable","loc":{"line":3,"column":27},"parent":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs-async-map\\out\\index.js","resolved":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs\\Observable.js"},{"name":"rxjs/operators/mergeMap","loc":{"line":5,"column":25},"parent":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs-async-map\\out\\index.js","resolved":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs\\operators\\mergeMap.js"},{"name":"./notify","loc":{"line":6,"column":23},"parent":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs-async-map\\out\\index.js","resolved":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs-async-map\\out\\notify.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = require(\"rxjs/Observable\");\nexports.Observable = Observable_1.Observable;\nvar mergeMap_1 = require(\"rxjs/operators/mergeMap\");\nvar notify_1 = require(\"./notify\");\nvar mapper = function (project) {\n    var notifiers = new Array();\n    var onReady = function () {\n        // find the first non-ready notifier in the queue,\n        // while invoking all ready notifiers that we encounter along the way\n        var notReadyIdx = notifiers.findIndex(function (notifier) { return !notifier.notifyIfReady(); });\n        if (notReadyIdx > 0) {\n            // remove all the notifiers we invoked\n            notifiers.splice(0, notReadyIdx);\n        }\n    };\n    return function (value) { return new Observable_1.Observable(function (sub) {\n        notifiers.push(notify_1.notify(project(value), sub, onReady));\n    }); };\n};\nexports.asyncMap = function (project, concurrent) {\n    return mergeMap_1.mergeMap(mapper(project), concurrent);\n};\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,8CAA6C;AAuBpC,qBAvBA,uBAAU,CAuBA;AAtBnB,oDAAmD;AAEnD,mCAA4C;AAE5C,IAAM,MAAM,GAAG,UAAO,OAAqC;IACzD,IAAM,SAAS,GAAG,IAAI,KAAK,EAAY,CAAC;IAExC,IAAM,OAAO,GAAG;QACd,kDAAkD;QAClD,qEAAqE;QACrE,IAAM,WAAW,GAAG,SAAS,CAAC,SAAS,CAAC,UAAA,QAAQ,IAAI,OAAA,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAzB,CAAyB,CAAC,CAAC;QAC/E,IAAI,WAAW,GAAG,CAAC,EAAE;YACnB,sCAAsC;YACtC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;SAClC;IACH,CAAC,CAAC;IAEF,OAAO,UAAC,KAAQ,IAAK,OAAA,IAAI,uBAAU,CAAI,UAAA,GAAG;QACxC,SAAS,CAAC,IAAI,CAAC,eAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC,EAFmB,CAEnB,CAAC;AACL,CAAC,CAAC;AAIW,QAAA,QAAQ,GAAG,UACtB,OAAoC,EACpC,UAAkB;IAElB,OAAA,mBAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,UAAU,CAAC;AAArC,CAAqC,CAAC","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { mergeMap } from 'rxjs/operators/mergeMap';\n\nimport { Notifier, notify } from './notify';\n\nconst mapper = <T, U>(project: (value: T) => PromiseLike<U>) => {\n  const notifiers = new Array<Notifier>();\n\n  const onReady = () => {\n    // find the first non-ready notifier in the queue,\n    // while invoking all ready notifiers that we encounter along the way\n    const notReadyIdx = notifiers.findIndex(notifier => !notifier.notifyIfReady());\n    if (notReadyIdx > 0) {\n      // remove all the notifiers we invoked\n      notifiers.splice(0, notReadyIdx);\n    }\n  };\n\n  return (value: T) => new Observable<U>(sub => {\n    notifiers.push(notify(project(value), sub, onReady));\n  });\n};\n\nexport { Observable };\n\nexport const asyncMap = <T, U>(\n  project: (item: T) => PromiseLike<U>,\n  concurrent: number\n): (source: Observable<T>) => Observable<U> =>\n  mergeMap(mapper(project), concurrent);\n"]}},"error":null,"hash":"8edd83b5ee129f2a8b5e5e34163c710f","cacheData":{"env":{}}}