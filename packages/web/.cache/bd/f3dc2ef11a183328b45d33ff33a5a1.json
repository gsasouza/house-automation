{"id":"../../../node_modules/lodash/_toKey.js","dependencies":[{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\packages\\web\\package.json","includedInParent":true,"mtime":1561054270676},{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\lodash\\package.json","includedInParent":true,"mtime":1559172019662},{"name":"./isSymbol","loc":{"line":1,"column":23},"parent":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\lodash\\_toKey.js","resolved":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\lodash\\isSymbol.js"}],"generated":{"js":"var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/lodash/_toKey.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}}],"sources":{"../../../node_modules/lodash/_toKey.js":"var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n"},"lineCount":22}},"error":null,"hash":"191f3be4efdd783c770573223bbd1a44","cacheData":{"env":{}}}