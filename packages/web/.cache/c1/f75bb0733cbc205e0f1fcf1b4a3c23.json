{"id":"../../../node_modules/date-fns/esm/isValid/index.js","dependencies":[{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\packages\\web\\package.json","includedInParent":true,"mtime":1561056647210},{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\date-fns\\esm\\isValid\\package.json","includedInParent":true,"mtime":1561056017587},{"name":"../toDate/index.js","loc":{"line":1,"column":19},"parent":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\date-fns\\esm\\isValid\\index.js","resolved":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\date-fns\\esm\\toDate\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isValid;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `true`        |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = (0, _index.default)(dirtyDate);\n  return !isNaN(date);\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":2,"column":0}},{"generated":{"line":69,"column":0},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":60,"column":15}},{"name":"isValid","generated":{"line":69,"column":9},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":60,"column":24}},{"generated":{"line":69,"column":16},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":60,"column":15}},{"name":"dirtyDate","generated":{"line":69,"column":17},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":60,"column":32}},{"generated":{"line":69,"column":26},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":60,"column":15}},{"generated":{"line":69,"column":28},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":60,"column":43}},{"generated":{"line":70,"column":0},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":61,"column":2}},{"name":"arguments","generated":{"line":70,"column":6},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":61,"column":6}},{"generated":{"line":70,"column":15},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":61,"column":15}},{"name":"length","generated":{"line":70,"column":16},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":61,"column":16}},{"generated":{"line":70,"column":22},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":61,"column":6}},{"generated":{"line":70,"column":25},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":61,"column":25}},{"generated":{"line":70,"column":26},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":61,"column":2}},{"generated":{"line":70,"column":28},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":61,"column":28}},{"generated":{"line":71,"column":0},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":4}},{"generated":{"line":71,"column":10},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":10}},{"name":"TypeError","generated":{"line":71,"column":14},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":14}},{"generated":{"line":71,"column":23},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":10}},{"generated":{"line":71,"column":24},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":24}},{"name":"arguments","generated":{"line":71,"column":59},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":59}},{"generated":{"line":71,"column":68},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":68}},{"name":"length","generated":{"line":71,"column":69},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":69}},{"generated":{"line":71,"column":75},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":24}},{"generated":{"line":71,"column":78},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":78}},{"generated":{"line":71,"column":88},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":10}},{"generated":{"line":71,"column":89},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":62,"column":4}},{"generated":{"line":72,"column":0},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":63,"column":3}},{"generated":{"line":74,"column":0},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":65,"column":2}},{"name":"date","generated":{"line":74,"column":6},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":65,"column":6}},{"generated":{"line":74,"column":10},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":65,"column":10}},{"generated":{"line":74,"column":13},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":65,"column":13}},{"name":"dirtyDate","generated":{"line":74,"column":33},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":65,"column":20}},{"generated":{"line":74,"column":42},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":65,"column":13}},{"generated":{"line":74,"column":43},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":65,"column":2}},{"generated":{"line":75,"column":0},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":66,"column":2}},{"generated":{"line":75,"column":9},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":66,"column":9}},{"name":"isNaN","generated":{"line":75,"column":10},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":66,"column":10}},{"generated":{"line":75,"column":15},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":66,"column":15}},{"name":"date","generated":{"line":75,"column":16},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":66,"column":16}},{"generated":{"line":75,"column":20},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":66,"column":15}},{"generated":{"line":75,"column":21},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":66,"column":2}},{"generated":{"line":76,"column":0},"source":"../../../node_modules/date-fns/esm/isValid/index.js","original":{"line":67,"column":1}}],"sources":{"../../../node_modules/date-fns/esm/isValid/index.js":"import toDate from '../toDate/index.js';\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `true`        |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}"},"lineCount":null}},"error":null,"hash":"30be9a82af7ad1b4de09937613053453","cacheData":{"env":{}}}