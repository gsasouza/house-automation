{"id":"../../../node_modules/chunkinator/dist/hashinator.js","dependencies":[{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\chunkinator\\dist\\hashinator.js.map","includedInParent":true,"mtime":1561012225508},{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\packages\\web\\package.json","includedInParent":true,"mtime":1561012880883},{"name":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\chunkinator\\package.json","includedInParent":true,"mtime":1561012225508},{"name":"rxjs-async-map","loc":{"line":3,"column":31},"parent":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\chunkinator\\dist\\hashinator.js","resolved":"C:\\Users\\gabri\\Documents\\usp\\codes\\eletronica-2\\node_modules\\rxjs-async-map\\out\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rxjs_async_map_1 = require(\"rxjs-async-map\");\nfunction arrayBufferToHex(buffer) {\n    return Array.prototype.map.call(new Uint8Array(buffer), function (x) { return ('00' + x.toString(16)).slice(-2); }).join('');\n}\nfunction blobToArrayBuffer(blob) {\n    var fileReader = new FileReader();\n    return new Promise(function (resolve, reject) {\n        fileReader.onload = function () {\n            resolve(this.result);\n        };\n        fileReader.onerror = reject;\n        fileReader.readAsArrayBuffer(blob);\n    });\n}\nexports.defaultHasher = function (blob) {\n    return blobToArrayBuffer(blob)\n        .then(function (arrayBuffer) { return crypto.subtle.digest('SHA-1', arrayBuffer); })\n        .then(arrayBufferToHex);\n};\nexports.blobToHashedBlob = function (hasher) { return function (blob) {\n    return hasher(blob)\n        .then(function (hash) { return ({ blob: blob, hash: hash + \"-\" + blob.size }); });\n}; };\nexports.hashinator = function (blobs$, _a) {\n    var hasher = _a.hasher, concurrency = _a.concurrency;\n    return rxjs_async_map_1.asyncMap(exports.blobToHashedBlob(hasher || exports.defaultHasher), concurrency)(blobs$);\n};\n"},"sourceMaps":{"js":{"version":3,"file":"hashinator.js","sourceRoot":"","sources":["../src/hashinator.ts"],"names":[],"mappings":";;AAAA,iDAA0C;AAI1C,0BAA0B,MAAmB;IAC3C,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAC7B,IAAI,UAAU,CAAC,MAAM,CAAC,EACtB,UAAC,CAAS,IAAK,OAAA,CAAC,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAjC,CAAiC,CACjD,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACb,CAAC;AAED,2BAA2B,IAAU;IACnC,IAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;IAEpC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,UAAU,CAAC,MAAM,GAAG;YAClB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC,CAAC;QACF,UAAU,CAAC,OAAO,GAAG,MAAM,CAAC;QAE5B,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC;AAEY,QAAA,aAAa,GAAoB,UAAC,IAAI;IACjD,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC;SAC7B,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,EAA1C,CAA0C,CAAC;SAC/D,IAAI,CAAC,gBAAgB,CAAC,CAAA;AACzB,CAAC,CAAC;AAEW,QAAA,gBAAgB,GAAG,UAAC,MAAuB,IAAK,OAAA,UAAC,IAAU;IACtE,OAAA,MAAM,CAAC,IAAI,CAAC;SACX,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,EAAC,IAAI,MAAA,EAAE,IAAI,EAAK,IAAI,SAAI,IAAI,CAAC,IAAM,EAAC,CAAC,EAAtC,CAAsC,CAAC;AADrD,CACqD,EAFM,CAEN,CAAC;AAE3C,QAAA,UAAU,GAAe,UAAC,MAAM,EAAE,EAAqB;QAApB,kBAAM,EAAE,4BAAW;IACjE,OAAA,yBAAQ,CAAC,wBAAgB,CAAC,MAAM,IAAI,qBAAa,CAAC,EAAE,WAAW,CAAC,CAAC,MAAM,CAAC;AAAxE,CAAwE,CAAC","sourcesContent":[null]}},"error":null,"hash":"3395792c5a2f9e0179dbf99b6fc84cab","cacheData":{"env":{}}}