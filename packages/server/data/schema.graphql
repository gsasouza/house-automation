# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"An object with an ID"
interface Node {
  "The id of the object."
  id: ID!
}

union Me = AdminUser | User

"Admin User data"
type AdminUser implements Node {
  _id: String
  email: String
  "The ID of an object"
  id: ID!
  name: String
  username: String
}

type AdminUserLoginPayload {
  clientMutationId: String
  error: String
  token: String
}

"Board data"
type Board implements Node {
  _id: String
  connected: Boolean
  createdBy: User
  host: String
  "The ID of an object"
  id: ID!
  name: String
  port: String
  type: String
}

type BoardAddPayload {
  boardEdge: BoardEdge
  clientMutationId: String
  error: String
}

"A connection to a list of items."
type BoardConnection {
  count: Int
  "A list of edges."
  edges: [BoardEdge]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type BoardEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: Board
}

"Device data"
type Device implements Node {
  _id: String
  board: Board
  connected: Boolean
  createdBy: User
  "The ID of an object"
  id: ID!
  name: String
  pin: String
  room: Device
  state: Boolean
  type: String
}

type DeviceAddPayload {
  clientMutationId: String
  deviceEdge: DeviceEdge
  error: String
}

type DeviceChangeStatePayload {
  clientMutationId: String
  deviceEdge: DeviceEdge
  error: String
}

type DeviceChangedStatePayload {
  deviceEdge: DeviceEdge
}

"A connection to a list of items."
type DeviceConnection {
  count: Int
  "A list of edges."
  edges: [DeviceEdge]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type DeviceEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: Device
}

type Mutation {
  AdminUserLogin(input: AdminUserLoginInput!): AdminUserLoginPayload
  BoardAdd(input: BoardAddInput!): BoardAddPayload
  DeviceAdd(input: DeviceAddInput!): DeviceAddPayload
  DeviceChangeState(input: DeviceChangeStateInput!): DeviceChangeStatePayload
  PlaceAdd(input: PlaceAddInput!): PlaceAddPayload
  RoomAdd(input: RoomAddInput!): RoomAddPayload
  UserLogin(input: UserLoginInput!): UserLoginPayload
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"Place data"
type Place implements Node {
  _id: String
  "The ID of an object"
  id: ID!
  name: String
  reference: String
}

type PlaceAddPayload {
  clientMutationId: String
  error: String
  placeEdge: PlaceEdge
}

"A connection to a list of items."
type PlaceConnection {
  count: Int
  "A list of edges."
  edges: [PlaceEdge]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type PlaceEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: Place
}

"The root of all... queries"
type Query {
  boards(after: String, before: String, first: Int, last: Int, search: String): BoardConnection
  devices(after: String, before: String, first: Int, last: Int, search: String): DeviceConnection
  me: Me
  "Fetches an object given its ID"
  node(
    #The ID of an object
    id: ID!
  ): Node
  places(after: String, before: String, first: Int, last: Int, search: String): PlaceConnection
  rooms(after: String, before: String, first: Int, last: Int, search: String): RoomConnection
  users(after: String, before: String, first: Int, last: Int, search: String): UserConnection
}

"Room data"
type Room implements Node {
  _id: String
  boardIosConnected(after: String, before: String, first: Int, last: Int, search: String): DeviceConnection
  boardIosConnectedCount: Int
  createdBy: User
  "The ID of an object"
  id: ID!
  name: String
  type: String
}

type RoomAddPayload {
  clientMutationId: String
  error: String
  roomEdge: RoomEdge
}

"A connection to a list of items."
type RoomConnection {
  count: Int
  "A list of edges."
  edges: [RoomEdge]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type RoomEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: Room
}

type Subscription {
  DeviceChangedState: DeviceChangedStatePayload
}

"User data"
type User implements Node {
  _id: String
  "The ID of an object"
  id: ID!
  isAdmin: Boolean
  name: String
  username: String
}

"A connection to a list of items."
type UserConnection {
  count: Int
  "A list of edges."
  edges: [UserEdge]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}

"An edge in a connection."
type UserEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: User
}

type UserLoginPayload {
  clientMutationId: String
  error: String
  token: String
}

input AdminUserLoginInput {
  clientMutationId: String
  password: String!
  username: String!
}

input BoardAddInput {
  clientMutationId: String
  host: String
  name: String!
  port: String
  type: String!
}

input DeviceAddInput {
  board: ID!
  clientMutationId: String
  name: String!
  pin: Int!
  room: ID!
  type: String!
}

input DeviceChangeStateInput {
  clientMutationId: String
  id: ID!
  state: Boolean!
}

input PlaceAddInput {
  clientMutationId: String
  name: String!
  reference: String!
}

input RoomAddInput {
  clientMutationId: String
  name: String!
  type: String!
}

input UserLoginInput {
  clientMutationId: String
  password: String!
  username: String!
}
